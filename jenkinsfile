pipeline {
    agent any
    environment {
        dockerRegistry = "jasonvandebeek/solvechess-frontend"
        dockerRegistryCredential = 'dockerhub_id'  
    }
    stages {
		stage('Install Dependencies') {
            steps {
                nodejs(nodeJSInstallationName: 'Node') {
                    sh 'npm install'
                }
            }
        }
        stage('E2E Tests') {
            environment {
                GOOGLE_CLIENT_ID = credentials('GOOGLE_CLIENT_ID')
                GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET')
                GOOGLE_REFRESH_TOKEN = credentials('GOOGLE_REFRESH_TOKEN')
            }
            steps {
                nodejs(nodeJSInstallationName: 'Node') {
                    sh "npx cypress run --browser 'electron' --spec 'cypress/e2e/**' --env 'TESTING_URL=https://solvechess.xyz,API_URL=https://api.solvechess.xyz,GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID},GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET},GOOGLE_REFRESH_TOKEN=${GOOGLE_REFRESH_TOKEN}'"
                }
            }
        }
        stage('SonarQube Analysis') {
			steps {
				script {
					def scannerHome = tool 'SonarScanner';
					withSonarQubeEnv() {
						sh "${scannerHome}/bin/sonar-scanner"
					}
				}
			}
		}
        stage('Build Docker Image') {
			steps {
				script {
					dockerImage = docker.build "${dockerRegistry}:latest"
				}
			}
		}
        stage('Publish to DockerHub') {
            steps {
                script {
                    docker.withRegistry('', dockerRegistryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}